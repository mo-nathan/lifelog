"""Split up ReportedEvents

Revision ID: 5b7a44b8d42b
Revises: 99818e957aa3
Create Date: 2018-01-01 15:59:25.095847+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import (
    relationship,
    sessionmaker,
)
from sqlalchemy.ext.declarative import declarative_base

# revision identifiers, used by Alembic.
revision = '5b7a44b8d42b'
down_revision = '99818e957aa3'
branch_labels = None
depends_on = None

Session = sessionmaker()
 
Base = declarative_base()


class OldReportedEvent(Base):
    __tablename__ = "reported_events"
 
    id = sa.Column(sa.Integer, primary_key = True)
    recorder = sa.Column(sa.String)
    what = sa.Column(sa.String)
    created_at = sa.Column(sa.DateTime, default=sa.func.now())
    updated_at = sa.Column(sa.DateTime, default=sa.func.now(),
                           onupdate=sa.func.now())
    earliest = sa.Column(sa.DateTime, default=sa.func.now())
    latest = sa.Column(sa.DateTime, default=sa.func.now())
    estimated_start = sa.Column(sa.DateTime, default=sa.func.now())
    estimated_end = sa.Column(sa.DateTime, default=sa.func.now())
    location_description = sa.Column(sa.String)
    latitude = sa.Column(sa.Float)
    longitude = sa.Column(sa.Float)
    location_error_in_meters = sa.Column(sa.Float)


class Actor(Base):
    __tablename__ = "actors"
 
    id = sa.Column(sa.Integer, primary_key = True)
    created_at = sa.Column(sa.DateTime, default=sa.func.now())
    updated_at = sa.Column(sa.DateTime,
                           default=sa.func.now(),
                           onupdate=sa.func.now())
    full_name = sa.Column(sa.String)
    short_name = sa.Column(sa.String)
    email = sa.Column(sa.String)
    description = sa.Column(sa.String)
    reported_events = relationship("NewReportedEvent",
                                   back_populates="actor")


class Location(Base):
    __tablename__ = "locations"
 
    id = sa.Column(sa.Integer, primary_key = True)
    created_at = sa.Column(sa.DateTime, default=sa.func.now())
    updated_at = sa.Column(sa.DateTime,
                           default=sa.func.now(),
                           onupdate=sa.func.now())
    description = sa.Column(sa.String)
    latitude = sa.Column(sa.Float)
    longitude = sa.Column(sa.Float)
    error_in_meters = sa.Column(sa.Float)
    reported_events = relationship("NewReportedEvent",
                                   back_populates="location")


class TimelineElement(Base):
    __tablename__ = "timeline_elements"
 
    id = sa.Column(sa.Integer, primary_key = True)
    created_at = sa.Column(sa.DateTime, default=sa.func.now())
    updated_at = sa.Column(sa.DateTime,
                           default=sa.func.now(),
                           onupdate=sa.func.now())
    earliest = sa.Column(sa.DateTime, default=sa.func.now())
    latest = sa.Column(sa.DateTime, default=sa.func.now())
    estimated_start = sa.Column(sa.DateTime, default=sa.func.now())
    estimated_end = sa.Column(sa.DateTime, default=sa.func.now())
    reported_events = relationship("NewReportedEvent",
                                   back_populates="timeline_element")



class NewReportedEvent(Base):
    __tablename__ = "reported_events2"
    __table_args__ = {"extend_existing": True}
 
    id = sa.Column(sa.Integer, primary_key = True)
    created_at = sa.Column(sa.DateTime, default=sa.func.now())
    updated_at = sa.Column(sa.DateTime, default=sa.func.now(),
                           onupdate=sa.func.now())
    what = sa.Column(sa.String)
    actor_id = sa.Column(sa.Integer, sa.ForeignKey('actors.id'))
    actor = relationship("Actor", back_populates="reported_events")
    timeline_element_id = sa.Column(sa.Integer,
                                    sa.ForeignKey('timeline_elements.id'))
    timeline_element = relationship("TimelineElement",
                                    back_populates="reported_events")
    location_id = sa.Column(sa.Integer, sa.ForeignKey('locations.id'))
    location = relationship("Location", back_populates="reported_events")


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('actors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('short_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('locations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('error_in_meters', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('timeline_elements',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('earliest', sa.DateTime(), nullable=True),
    sa.Column('latest', sa.DateTime(), nullable=True),
    sa.Column('estimated_start', sa.DateTime(), nullable=True),
    sa.Column('estimated_end', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reported_events2',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('actor_id', sa.Integer(), nullable=True),
    sa.Column('what', sa.String(), nullable=True),
    sa.Column('timeline_element_id', sa.Integer(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['actors.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['timeline_element_id'], ['timeline_elements.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    bind = op.get_bind()
    session = Session(bind=bind)
    for event in session.query(OldReportedEvent):
        new_event = NewReportedEvent()
        new_event.created_at = event.created_at
        new_event.updated_at = event.updated_at
        new_event.what = event.what
        add_actor(session, event, new_event)
        add_location(session, event, new_event)
        add_timeline_element(session, event, new_event)
        session.add(new_event)
    session.commit()
    op.drop_table('reported_events')
    # ### end Alembic commands ###


def add_actor(session, event, new_event):
    actor = Actor()
    actor.full_name = event.recorder
    actor.short_name = event.recorder.split(" ")[0]
    session.add(actor)
    new_event.actor = actor


def add_location(session, event, new_event):
    location = Location()
    location.description = event.location_description
    location.latitude = event.latitude
    location.longitude = event.longitude
    location.error_in_meters = event.location_error_in_meters
    session.add(location)
    new_event.location = location


def add_timeline_element(session, event, new_event):
    element = TimelineElement()
    element.earliest = event.earliest
    element.latest = event.latest
    element.estimated_start = event.estimated_start
    element.estimated_end = event.estimated_end
    session.add(element)
    new_event.timeline_element = element


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('reported_events',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('recorder', sa.VARCHAR(), nullable=True),
    sa.Column('what', sa.VARCHAR(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.Column('earliest', sa.DATETIME(), nullable=True),
    sa.Column('latest', sa.DATETIME(), nullable=True),
    sa.Column('estimated_start', sa.DATETIME(), nullable=True),
    sa.Column('estimated_end', sa.DATETIME(), nullable=True),
    sa.Column('location_description', sa.VARCHAR(), nullable=True),
    sa.Column('latitude', sa.FLOAT(), nullable=True),
    sa.Column('longitude', sa.FLOAT(), nullable=True),
    sa.Column('location_error_in_meters', sa.FLOAT(), nullable=True),
    sa.Column('actor_id', sa.INTEGER(), nullable=True),
    sa.Column('location_id', sa.INTEGER(), nullable=True),
    sa.Column('timeline_element_id', sa.INTEGER(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    for event in session.query(NewReportedEvent):
        old_event = OldReportedEvent()
        old_event.created_at = event.created_at
        old_event.updated_at = event.updated_at
        old_event.what = event.what
        copy_actor(event.actor, old_event)
        copy_location(event.location, old_event)
        copy_timeline_element(event.timeline_element, old_event)
    session.commit()
    op.drop_table('reported_events2')
    op.drop_table('timeline_elements')
    op.drop_table('locations')
    op.drop_table('actors')
    # ### end Alembic commands ###


def copy_actor(actor, event):
    event.recorder = actor.full_name


def copy_location(location, new_event):
    event.location_description = location.description
    event.latitude = location.latitude
    event.longitude = location.longitude
    event.location_error_in_meters = location.error_in_meters


def copy_timeline_element(element, new_event):
    event.earliest = element.earliest
    event.latest = element.latest
    event.estimated_start = element.estimated_start
    event.estimated_end = element.estimated_end
